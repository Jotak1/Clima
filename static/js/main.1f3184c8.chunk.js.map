{"version":3,"sources":["components/Clima.js","components/Error.js","components/Formulario.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["Clima","resultado","name","main","kelvin","className","parseFloat","temp","toFixed","temp_max","temp_min","Error","mensaje","Formulario","busqueda","guardarBusqueda","guardarConsultar","useState","error","guardarError","ciudad","pais","handleChange","e","target","value","onSubmit","preventDefault","trim","type","id","onChange","htmlFor","Header","titulo","href","App","componente","consultar","guardarResultado","useEffect","a","url","fetch","respuesta","json","cod","consultarAPI","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f3184c8.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Clima = ({resultado}) => {\r\n    // extraer los valores\r\n    const {name, main} = resultado;\r\n\r\n    // grados kelvin\r\n    const kelvin = 273.15;\r\n\r\n    if(!name) return null;\r\n    return ( \r\n        <div className=\"card-panel white col s12\">\r\n            <div className='black-text'>\r\n                <h2>El clima de {name}</h2>\r\n                <p className='temperatura'>\r\n                    {parseFloat(main.temp-kelvin,10).toFixed(2)} <span> &#x2103;</span>\r\n                </p>\r\n                <p> Temperatura Maxima: \r\n                    {parseFloat(main.temp_max-kelvin,10).toFixed(2)} <span> &#x2103;</span>\r\n                </p>\r\n                <p> Temperatura Minima: \r\n                    {parseFloat(main.temp_min-kelvin,10).toFixed(2)} <span> &#x2103;</span>\r\n                </p>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n\r\nClima.propTypes = {\r\n    resultado: PropTypes.object.isRequired,\r\n}\r\n \r\nexport default Clima;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Error = ({mensaje}) => {\r\n    return (  \r\n       <p className='red darken-4 error'>{mensaje}</p>\r\n    );\r\n}\r\n\r\nError.propTypes = {\r\n    mensaje: PropTypes.string.isRequired,\r\n}\r\n \r\nexport default Error;","import React, {useState} from 'react';\r\nimport Error from './Error';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Formulario = ({busqueda,guardarBusqueda,guardarConsultar}) => {\r\n    // state del formulario\r\n    \r\n    const [error, guardarError] = useState(false);\r\n    // extraer ciudad y pais\r\n    const {ciudad, pais} = busqueda;\r\n\r\n    //funcion que coloca los elementos en el state\r\n    const handleChange = e => {\r\n        //actualizar el state\r\n        guardarBusqueda({\r\n            ...busqueda,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    // Cuando el usuario da submit al form\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        // validadar\r\n        if(ciudad.trim()===''|| pais.trim()===''){\r\n            guardarError(true);\r\n            return;\r\n        };\r\n        guardarError(false);\r\n\r\n        guardarConsultar(true);\r\n    }\r\n\r\n    return ( \r\n        <form\r\n            onSubmit={handleSubmit}\r\n        >\r\n            {error ? <Error mensaje='Ambos campos son obligatorios'/>:null}\r\n            <div className=\"input-field col s12\">\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"ciudad\"\r\n                    id='ciudad'\r\n                    value={ciudad}\r\n                    onChange={handleChange}\r\n                />\r\n                <label htmlFor='ciudad'>Ciudad:</label>\r\n            </div>\r\n            <div className=\"input-field col s12\">\r\n                <select\r\n                    name='pais'\r\n                    id=\"pais\"\r\n                    value={pais}\r\n                    onChange={handleChange}\r\n                >\r\n                    <option value=\"\">-- Seleccion un pais --</option>\r\n                    <option value=\"CL\">Chile</option>\r\n                    <option value=\"US\">Estados Unidos</option>\r\n                    <option value=\"MX\">México</option>\r\n                    <option value=\"AR\">Argentina</option>\r\n                    <option value=\"CO\">Colombia</option>\r\n                    <option value=\"CR\">Costa Rica</option>\r\n                    <option value=\"ES\">España</option>\r\n                    <option value=\"PE\">Perú</option>\r\n                </select>\r\n                <label htmlFor='pais'>Pais: </label>\r\n            </div>\r\n            <div className=\"input-field col s12\">\r\n                <button\r\n                    type='submit'\r\n                    className=\"waves-effect waves-light btn-large btn-block yellow accent-4 col s12\"\r\n                    >Buscar Clima</button>\r\n            </div>\r\n        </form>\r\n     );\r\n}\r\n \r\nFormulario.propTypes = {\r\n    busqueda: PropTypes.object.isRequired,\r\n    guardarBusqueda: PropTypes.func.isRequired,\r\n    guardarConsultar: PropTypes.func.isRequired,\r\n}\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = ({titulo}) => {\r\n    return ( \r\n        <nav>\r\n            <div className=\"nav-wrappen light-blue darken-2\">\r\n                <a href=\"#!\" className='brand-logo'>{titulo}</a>\r\n            </div>\r\n        </nav>\r\n     );\r\n}\r\n\r\nHeader.propTypes = {\r\n    titulo: PropTypes.string.isRequired,\r\n}\r\n \r\nexport default Header;","import React, { Fragment, useEffect, useState } from 'react';\nimport Clima from './components/Clima';\nimport Formulario from './components/Formulario';\nimport Header from './components/Header';\nimport Error from './components/Error';\nfunction App() {\n  //state del formulario\n  const [busqueda, guardarBusqueda] = useState({\n    ciudad: '',\n    pais: '',\n  });\n  const [consultar, guardarConsultar] = useState(false);\n  const [resultado, guardarResultado] = useState({});\n  const [error, guardarError] = useState(false);\n  const { ciudad, pais} = busqueda;\n\n  useEffect(()=>{\n    const consultarAPI = async () => {\n      if(consultar){const appID = 'f60671f732ef992bdf5568f3b1b93fa9';\n      const url = `https://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appID}`\n      \n      const respuesta = await fetch(url);\n      const resultado = await respuesta.json(); \n      guardarResultado(resultado);\n      guardarConsultar(false);\n      //detecta si hubo resultados c orrectos en la consulta\n      if(resultado.cod === '404') {\n        guardarError(true);\n      } else {\n        guardarError(false);\n      }\n    }\n\n    }\n    consultarAPI();\n    //eslint-disable-next-line\n  },[consultar])\n\n  let componente;\n  if(error){\n    componente = <Error mensaje=\"No hay resultados\"/>\n  } else {\n    componente = <Clima\n                    resultado={resultado}\n                  />\n  }\n  return (\n    <Fragment>\n      <Header\n        titulo='Clima React App'\n      />\n      <div className=\"contenedor-form\">\n        <div className='container'>\n          <div className='row'>\n            <div className='col m6 s12'>\n              <Formulario\n                busqueda={busqueda}\n                guardarBusqueda={guardarBusqueda}\n                guardarConsultar={guardarConsultar}\n              />\n            </div>\n            <div className='col m6 s12'>\n              {componente}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}